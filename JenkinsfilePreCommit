#!/usr/bin/env groovy

/* IMPORTANT:
 *
 * In order to make this pipeline work, the following configuration on Jenkins is required:
 * - slave with a specific label (see pipeline.agent.label below)
 * - credentials plugin should be installed and have the secrets with the following names:
 *   + lciadm100credentials (token to access Artifactory)
 */

def defaultBobImage = 'armdocker.rnd.ericsson.se/sandbox/adp-staging/adp-cicd/bob.2.0:1.5.2-0'
def bobCommand = new BobCommand()
        .bobImage(defaultBobImage)
        .envVars([ISO_VERSION: '${ISO_VERSION}'])
        .needDockerSocket(true)
        .toString()
def failedStage = ''
pipeline {
    agent {
        label 'Cloud-Native'
    }
    parameters {
        string(name: 'ISO_VERSION', defaultValue: '0.0.0', description: 'The ENM ISO version (e.g. 1.65.77)')
    }
    stages {
        stage('Inject Credential Files') {
            steps {
                withCredentials([file(credentialsId: 'lciadm100-docker-auth', variable: 'dockerConfig')]) {
                    sh "install -m 600 ${dockerConfig} ${HOME}/.docker/config.json"
                }
            }
        }
        stage('Checkout Cloud-Native SG Git Repository') {
            steps {
                script {
                    if (env.GERRIT_CHANGE_NUMBER) {
                        checkout changelog: true, \
                        scm: [$class: 'GitSCM', \
                        branches: [[name: "$GERRIT_REFSPEC"]], \
                        doGenerateSubmoduleConfigurations: false, \
                        extensions: [[$class: 'BuildChooserSetting', buildChooser: [$class: 'GerritTriggerBuildChooser']]], \
                        submoduleCfg: [], \
                        userRemoteConfigs: [[refspec: "${GERRIT_REFSPEC}", \
                        url: "${GERRIT_MIRROR}/${GERRIT_PROJECT}"]]]
                    } else {
                        println "No GERRIT_CHANGE_NUMBER"
                        git changelog: true, poll: false, url: '${GERRIT_MIRROR}/${REPO}'
                    }
                }
            }
        }
        stage('Helm Dep Up ') {
            steps {
                sh "${bobCommand} helm-dep-up"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Generate New Version') {
            steps {
                sh "${bobCommand} generate-new-version"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bobCommand} remove-image-with-all-tags"
                    }
                }
            }
        }
        stage('Merge values files') {
            steps{
                script {
                    appconfig_values = sh (script: "ls ${WORKSPACE}/chart/eric-enmsg-fmx-rabbitmq-server/appconfig/ | grep values.yaml", returnStatus: true)
                    if (appconfig_values == 0) {
                        sh("${bobCommand} merge-values-files-with-appconfig")
                    } else {
                        sh("${bobCommand} merge-values-files")
                    }
                    sh '''
                         if git status | grep 'values.yaml' > /dev/null; then
                            git add chart/eric-enmsg-fmx-rabbitmq-server/values.yaml
                            git commit -m "NO JIRA - Merging Values.yaml file with common library values.yaml"
                         fi
                     '''
                }
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
         stage('Helm Lint') {
            steps {
                sh "${bobCommand} lint-helm"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Linting Dockerfile') {
            steps {
                sh "${bobCommand} lint-dockerfile"
                archiveArtifacts 'dockerfilelint.log'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('ADP Helm Design Rule Check') {
            steps {
                sh "${bobCommand} test-helm || true"
                archiveArtifacts 'design-rule-check-report.*'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Build Image and Chart') {
            steps {
                sh "${bobCommand} build-image-with-all-tags-internal"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bobCommand} remove-image-with-all-tags-internal"
                    }
                }
            }
        }
        stage('Publish Images to Artifactory') {
            steps {
                sh "${bobCommand} push-image-with-all-tags-internal"
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                        sh "${bobCommand} remove-image-with-all-tags-internal"
                    }
                }
                always {
                    sh "${bobCommand} remove-image-with-all-tags-internal"
                }
            }
        }
        stage('Generate ADP Parameters') {
            steps {
                sh "${bobCommand} generate-output-parameters-internal-stage"
                archiveArtifacts 'artifact.properties'
            }
            post {
                failure {
                    script {
                        failedStage = env.STAGE_NAME
                    }
                }
            }
        }
        stage('Trivy Scan') {
            steps {
                sh("${bobCommand} trivy-inline-scan")
            }
        }

        stage('Grype Scan') {
            steps {
                sh("${bobCommand} grype-scan")
            }
        }

        stage('Generate VA Report') {
            steps {
                script {
                    try {
                        sh("${bobCommand} generate-VA-report-V2")
                        sh "${bobCommand} generate-pdf"
                    } catch (err) {
                        echo "Generate VA Report: ${err}"

                        sh "${bobCommand} generate-pdf"
                        sh "zip -r fmx-rabbitmq_va_scan.zip build/"
                        sh "echo 'Failure on ${env.BUILD_URL}' | mail -a fmx-rabbitmq_va_scan.zip -s 'Failed VA scan: ${currentBuild.fullDisplayName}' teamgor@tcscomprod.onmicrosoft.com"
                    }
                }
            }
        }
    }
    post {
        failure {
            mail to: 'PDLNMFEATU@pdl.internal.ericsson.com,${GERRIT_CHANGE_OWNER_EMAIL},${GERRIT_PATCHSET_UPLOADER_EMAIL}',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Failure on ${env.BUILD_URL}"

         }
    }
}

// More about @Builder: http://mrhaki.blogspot.com/2014/05/groovy-goodness-use-builder-ast.html
import groovy.transform.builder.Builder
import groovy.transform.builder.SimpleStrategy

@Builder(builderStrategy = SimpleStrategy, prefix = '')
class BobCommand {
    def bobImage = 'bob.2.0:latest'
    def envVars = [:]
    def needDockerSocket = false

    String toString() {
        def env = envVars
                .collect({ entry -> "-e ${entry.key}=\"${entry.value}\"" })
                .join(' ')

        def cmd = """\
            |docker run
            |--init
            |--rm
            |--workdir \${PWD}
            |--user \$(id -u):\$(id -g)
            |-v \${PWD}:\${PWD}
            |-v /home/enmadm100/doc_push/group:/etc/group:ro
            |-v /home/enmadm100/doc_push/passwd:/etc/passwd:ro
            |-v \${HOME}/.m2:\${HOME}/.m2
            |-v \${HOME}/.docker:\${HOME}/.docker
            |${needDockerSocket ? '-v /var/run/docker.sock:/var/run/docker.sock' : ''}
            |${env}
            |\$(for group in \$(id -G); do printf ' --group-add %s' "\$group"; done)
            |--group-add \$(stat -c '%g' /var/run/docker.sock)
            |${bobImage}
            |"""
        return cmd
                .stripMargin()           // remove indentation
                .replace('\n', ' ')      // join lines
                .replaceAll(/[ ]+/, ' ') // replace multiple spaces by one
    }
} 
